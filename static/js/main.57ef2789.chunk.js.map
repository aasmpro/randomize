{"version":3,"sources":["components/item/component.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["Item","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","increase","bind","assertThisInitialized","decrease","changeTitle","delete","state","id","item","title","amount","e","setState","handleTotal","newTitle","target","value","handleRemove","react_default","a","createElement","className","onClick","onChange","React","Component","App","addItem","deleteItem","total","count","items","_this2","concat","toConsumableArray","filter","_this3","map","component_Item","key","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","App_App","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.57ef2789.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class Item extends React.Component<any, any>{\n  constructor(props: any){\n    super(props);\n    this.increase = this.increase.bind(this);\n    this.decrease = this.decrease.bind(this);\n    this.changeTitle = this.changeTitle.bind(this);\n    this.delete = this.delete.bind(this);\n    this.state = {\n      id: props.item.id,\n      title: props.item.title,\n      amount: props.item.amount,\n    };\n  };\n\n  increase(e: any){\n    this.setState((state:any, props:any) => ({\n      amount: state.amount+1\n    }));\n    this.props.handleTotal(1);\n  }\n\n  decrease(e: any){\n    if(this.state.amount > 1){\n      this.setState((state:any, props:any)=>({\n        amount: state.amount-1\n      }));\n      this.props.handleTotal(-1);\n    }\n  }\n\n  changeTitle(e: any){\n    const newTitle = e.target.value;\n    this.setState((state:any, props:any)=>({\n      title: newTitle\n    }));\n  }\n\n  delete(e: any){\n    this.props.handleTotal(-this.state.amount);\n    this.props.handleRemove(this.state.id);\n  }\n\n  render() {\n    return (\n      <div className=\"item\">\n        <button onClick={this.delete}>X</button>\n        <input value={this.state.title} onChange={this.changeTitle}/>\n        <button onClick={this.decrease}>-</button>\n        <span>{this.state.amount}</span>\n        <button onClick={this.increase}>+</button>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.css';\nimport Item from './item/component'\n\nexport default class App extends React.Component<any, any>{\n  constructor(props: {}){\n    super(props);\n    this.handleTotal = this.handleTotal.bind(this);\n    this.addItem = this.addItem.bind(this);\n    this.deleteItem = this.deleteItem.bind(this);\n    this.state = {\n      total: 0,\n      count: 1,\n      items: []\n    }\n  };\n\n  handleTotal(value: number){\n    this.setState((state: any, props: any)=>({\n      total: this.state.total+value\n    }));\n  }\n\n  addItem(){\n    this.setState((state: any, props: any)=>({\n      items: [...state.items, {\n        id: state.count,\n        title: `item ${state.count}`,\n        amount: 1\n      }],\n      count: state.count + 1,\n      total: state.total + 1\n    }));\n  }\n\n  deleteItem(id: number){\n    this.setState((state: any, props: any)=>({\n      items: state.items.filter((item: any) => item.id !== id)\n    }));\n  }\n\n  render() {\n    return (\n      <div>\n        <div id=\"total\">{this.state.total}</div>\n        <div>\n          {this.state.items.map((item: any)=>\n            <Item handleTotal={this.handleTotal}\n                  item={item}\n                  key={item.id}\n                  handleRemove={this.deleteItem}\n                  />\n          )}\n        </div>\n        <button onClick={this.addItem}>+</button>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}