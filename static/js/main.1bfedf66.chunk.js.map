{"version":3,"sources":["components/item/component.tsx","components/random-item/component.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["Item","increase","e","_this","props","handleAmount","item","id","amount","decrease","changeTitle","newTitle","target","value","handleTitle","delete","deleteItem","react_default","a","createElement","card","size","bodyStyle","padding","actions","icon","type","onClick","this","input","title","onChange","addonAfter","style","borderRadius","React","Component","RandomItem","state","seen","see","setState","Modal","info","data","centered","textAlign","className","label","Content","Layout","shuffle","i","length","j","Math","floor","random","_ref","App","count","items","randomView","randomItems","total","reduce","preItem","curItem","map","Object","objectSpread","addItem","concat","toConsumableArray","filter","randomize","list","forEach","push","_this2","layout","grid","gutter","xs","sm","md","lg","xl","dataSource","renderItem","index","component_RandomItem","key","marginBottom","es_button","block","component_Item","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","App_App","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.1bfedf66.chunk.js","sourcesContent":["import React from 'react';\nimport { Card, Icon, Input} from 'antd';\n\nexport default class Item extends React.Component<any, any>{\n  increase = (e: any) => {\n    this.props.handleAmount(this.props.item.id, this.props.item.amount+1);\n  }\n\n  decrease = (e: any) => {\n    if(this.props.item.amount > 1){\n      this.props.handleAmount(this.props.item.id, this.props.item.amount-1);\n    }\n  }\n\n  changeTitle = (e: any) => {\n    const newTitle = e.target.value;\n    this.props.handleTitle(this.props.item.id, newTitle);\n  }\n\n  delete = (e: any) => {\n    this.props.deleteItem(this.props.item.id);\n  }\n\n  render() {\n    return (\n      <Card\n        size=\"small\"\n        bodyStyle={{padding: 0}}\n        actions={[\n          <Icon type=\"left\" onClick={this.decrease}/>, \n          <span>{this.props.item.amount}</span>, \n          <Icon type=\"right\" onClick={this.increase}/>]}>\n        <Input value={this.props.item.title} onChange={this.changeTitle} size=\"large\"\n          // style={{border: 'None', borderRadius: 0}}\n          addonAfter={<Icon style={{borderRadius:0}} type=\"close\" onClick={this.delete}/>}/>\n      </Card>\n    );\n  }\n}\n","import React from 'react';\nimport { Card, Modal } from 'antd';\n\nexport default class RandomItem extends React.Component<any, any>{\n  state = {\n    seen: false\n  }\n\n  see = (e: any) => {\n    if(!this.state.seen){\n      this.setState({\n        seen: true\n      })\n      Modal.info({\n        title: this.props.data,\n        centered: true\n      });\n    }\n  }\n\n  render() {\n    return (\n      <Card style={{ textAlign: \"center\" }} \n            onClick={this.see}\n            className={this.state.seen ? 'random-item seen' : 'random-item'}>\n        {this.props.label}\n      </Card>\n    );\n  }\n}\n","import React from 'react';\nimport Item from './item/component';\nimport RandomItem from './random-item/component';\nimport { Layout, Icon, Button, List } from 'antd';\nimport './App.css';\nimport 'antd/dist/antd.css';\n\nconst { Content } = Layout;\n\nfunction shuffle(a: any) {\n  for (let i = a.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [a[i], a[j]] = [a[j], a[i]];\n  }\n  return a;\n}\n\nexport default class App extends React.Component<any, any, any>{\n  count = 0;\n  state = {\n    items: [],\n    randomView: false,\n    randomItems: []\n  }\n\n  total = () => {\n    return this.state.items.reduce((preItem: any, curItem: any) => {\n      return preItem + curItem.amount;\n    }, 0);\n  }\n\n  handleTitle = (id: number, title: string) => {\n    this.setState((state: any, props: any) => ({\n      items: state.items.map((item: any) => (item.id === id ? {...item, title} : item))\n    }));\n  }\n\n  handleAmount = (id: number, amount: number) => {\n    this.setState((state: any, props: any) => ({\n      items: state.items.map((item: any) => (item.id === id ? {...item, amount} : item))\n    }));\n  }\n\n  addItem = () => {\n    this.setState((state: any, props: any)=>({\n      items: [...state.items, {\n        id: this.count,\n        title: `item ${this.count}`,\n        amount: 1\n      }],\n    }));\n    this.count += 1;\n  }\n\n  deleteItem = (id: number) => {\n    this.setState((state: any, props: any)=>({\n      items: state.items.filter((item: any) => item.id !== id)\n    }));\n  }\n\n  randomize = () => {\n    let list: any[] = [];\n    this.state.items.forEach((item: any)=> {\n      for(let i=0; i<item.amount; i++){\n        list.push(item.title)\n      }\n    })\n    this.setState((state: any, props: any)=>({\n      randomItems: shuffle(list),\n      randomView: true\n    }));\n  }\n\n  render() {\n    if(this.state.randomView){\n      return (\n        <Layout>\n          <Content>\n            <List \n              grid={{gutter:10, xs: 3, sm: 4, md: 6, lg: 6, xl: 8}}\n              dataSource={this.state.randomItems}\n              renderItem={(item: any, index: number) => (\n                <List.Item>\n                  <RandomItem data={item}\n                              label={index+1}\n                              key={index}\n                              />\n                </List.Item>\n              )}\n            />\n            <div style={{marginBottom:\"45px\"}}></div>\n          </Content>\n          <Button onClick={() => {this.setState({randomView: false})}}\n            className=\"bottom-fixed\" block>\n              <Icon type=\"close\"/>\n          </Button>\n        </Layout>\n      )\n    } else {\n      return (\n        <Layout>\n          <Content>\n            {/* <p style={{margin:0, padding:0}}>total</p> */}\n            <p id=\"total\">{this.total()}</p>\n            <div>\n              {this.state.items.map((item: any)=>\n                <Item item={item}\n                      key={item.id}\n                      deleteItem={this.deleteItem}\n                      handleTitle={this.handleTitle}\n                      handleAmount={this.handleAmount}\n                      />\n              )}\n            </div>\n            <Icon className=\"add-item\" onClick={this.addItem} type=\"plus-circle\" />\n            <Button onClick={this.randomize} className=\"bottom-fixed\" block>Randomize</Button>\n          </Content>\n        </Layout>\n      );\n    }\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}